/**
 * @fileoverview Script for bundling the client into a single html file,
 * which is then placed in a string in /Arduino/client.h.
 * Run with `deno task build`.
 */

// @ts-expect-error
import {rollup} from "https://esm.sh/rollup@2.75.7?pin=v86";
// @ts-expect-error
import {importAssertionsPlugin} from "https://esm.sh/rollup-plugin-import-assert@2.1.0?pin=v86"
// @ts-expect-error
import {importAssertions} from "https://esm.sh/acorn-import-assertions@1.8.0?pin=v86";
// @ts-expect-error
import {setCwd} from "https://deno.land/x/chdir_anywhere@v0.0.2/mod.js";
setCwd();

console.log("Building client...");
const bundle = await rollup({
	input: "../src/main.js",
	/**
	 * @param {{code: string, message: string}} message
	 */
	onwarn: message => {
		if (message.code == "CIRCULAR_DEPENDENCY") return;
		console.error(message.message);
	},
	acornInjectPlugins: [importAssertions],
	plugins: [
		importAssertionsPlugin(),
	],
});
const {output} = await bundle.generate({
	format: "esm",
});

let htmlContent = await Deno.readTextFile("../src/index.html");

// Find "./main.js"
const mainJsIndex = htmlContent.indexOf("./main.js");
// Find the first "<script" occurrence before it
const scriptStartIndex = htmlContent.lastIndexOf("<script", mainJsIndex);
// Find the first "</script>" occurrence after it
const scriptEndIndex = htmlContent.indexOf("</script>", scriptStartIndex) + "</script>".length;
// Remove the script tag
htmlContent = htmlContent.slice(0, scriptStartIndex) + htmlContent.slice(scriptEndIndex);

// Inject an inline script tag with the build output before "<!--inline main.js inject position-->"
const injectIndex = htmlContent.indexOf("<!--inline main.js inject position-->");
htmlContent = htmlContent.slice(0, injectIndex) + `<script>${output[0].code}</script>` + htmlContent.slice(injectIndex);

// Write the output to dist.html so that we debug the client without having to
// build a new esp binary.
await Deno.writeTextFile("../dist.html", htmlContent);

// Generate the Arduino client.h file
const clientH = `// This file is automatically generated by /Website/scripts/build.js
// To update it, run \`deno task build\`.

Const String HTML = "${htmlContent.replaceAll('"', '\\"')}";
`;
await Deno.writeTextFile("../../Arduino/client.h", clientH);
